{"version":3,"file":"static/js/50.8091153d.chunk.js","mappings":"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","sources":["component/UI/pages/signup/sections/AllSignUp.jsx","component/UI/pages/signup/SignUp.jsx","component/common/TextError.jsx"],"sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport TextError from \"./../../../../common/TextError\";\nimport {\n  signInUser,\n  signUpUser,\n} from \"./../../../../../redux/features/dataAuth/dataAuthSlice\";\n\nfunction LoginSignUp({\n  signUpPage,\n  signUpImgs,\n  errorMsg,\n  signUpUser,\n  signInUser,\n}) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const redirectPath = location.state?.path || \"/\";\n\n  const initialValues = {\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    checkbox: false,\n  };\n  const validationSchema = Yup.object({\n    name: Yup.string().required(errorMsg.required),\n    email: Yup.string().email(errorMsg.invalid).required(errorMsg.required),\n    password: Yup.string().required(errorMsg.required),\n    checkbox: Yup.boolean(),\n  });\n  const onSubmit = async (values, submitProps) => {\n    // console.log(values);\n    await signUpUser(values);\n    await signInUser(values);\n    if (localStorage.getItem(\"token\")) {\n      navigate(redirectPath, { replace: true });\n    }\n    submitProps.setSubmitting(false);\n    submitProps.resetForm();\n  };\n  const handleGoLogin = () => {\n    navigate(`/login`);\n  };\n  return (\n    <section className=\"login\">\n      <div className=\"container-wrapped\">\n        <div className=\"sign\">\n          <div className=\"sign-left-container\">\n            <div className=\"sign-left\">\n              <div className=\"sign-left-top\">\n                <div className=\"hand-img\">\n                  <img src={signUpImgs.logoImg} alt=\"\" />\n                </div>\n                <h2 className=\"sign-header\">{signUpPage.signupSignHeader}</h2>\n                <p className=\"sign-paragraph\">\n                  {signUpPage.signupSignParagraph}\n                </p>\n              </div>\n              <div className=\"sign-form\">\n                <Formik\n                  initialValues={initialValues}\n                  validationSchema={validationSchema}\n                  onSubmit={onSubmit}\n                >\n                  {(formik) => (\n                    <Form>\n                      <div className=\"sign-box sign-name\">\n                        <label htmlFor=\"login-name\">\n                          {signUpPage.signupNameLabel}\n                        </label>\n                        <Field\n                          type=\"text\"\n                          id=\"login-name\"\n                          name=\"name\"\n                          placeholder={signUpPage.signupNamePlaceholder}\n                        />\n                        <ErrorMessage name=\"name\" component={TextError} />\n                      </div>\n                      <div className=\"sign-box sign-email\">\n                        <label htmlFor=\"login-email\">\n                          {signUpPage.signupEmailLabel}\n                        </label>\n                        <Field\n                          type=\"email\"\n                          id=\"login-email\"\n                          name=\"email\"\n                          placeholder={signUpPage.signupEmailPlaceholder}\n                        />\n                        <ErrorMessage name=\"email\" component={TextError} />\n                      </div>\n                      <div className=\"sign-box sign-password\">\n                        <label htmlFor=\"login-password\">\n                          {signUpPage.signupPasswordLabel}\n                        </label>\n                        <Field\n                          type=\"password\"\n                          id=\"login-password\"\n                          name=\"password\"\n                          placeholder={signUpPage.signupPasswordPlaceholder}\n                        />\n                        <ErrorMessage name=\"password\" component={TextError} />\n                      </div>\n                      <div className=\"text-remember\">\n                        <div className=\"checkbox-box\">\n                          <Field\n                            type=\"checkbox\"\n                            id=\"login-checkbox\"\n                            name=\"checkbox\"\n                          />\n                          <label htmlFor=\"login-checkbox\">\n                            {signUpPage.signupRememberMe}\n                          </label>\n                        </div>\n                      </div>\n                      <button type=\"submit\" className=\"sign-btn\">\n                        {signUpPage.signupLoginBtn}\n                      </button>\n                      <button type=\"button\" className=\"google-btn\">\n                        <img\n                          className=\"googleLogo\"\n                          src={signUpImgs.googleLogo}\n                          alt=\"\"\n                        />\n                        {signUpPage.signupGoogleBtn}\n                      </button>\n\n                      <p className=\"bottom-paragraph\">\n                        {signUpPage.signupBottomParagraph}&thinsp;\n                        <button\n                          type=\"button\"\n                          className=\"button-go-login\"\n                          onClick={handleGoLogin}\n                        >\n                          <span className=\"bottom-span\">\n                            {signUpPage.signupBottomSpan}\n                          </span>\n                        </button>\n                      </p>\n                    </Form>\n                  )}\n                </Formik>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"sign-right\">\n            <img src={signUpImgs.leftImg} alt=\"\" />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\nconst mapStateToProps = (state) => {\n  return {\n    signUpPage: state.dataText.dataJson.signUpPage,\n    signUpImgs: state.allImages.pagesImgs.signUpImgs,\n    errorMsg: state.dataText.dataJson.errorMsg,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signUpUser: (formData) => dispatch(signUpUser(formData)),\n    signInUser: (formData) => dispatch(signInUser(formData)),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginSignUp);\n","import React from \"react\";\nimport AllSignUp from \"./sections/AllSignUp\";\nimport { connect } from \"react-redux\";\nimport usePageMeta from './../../../../hooks/usePageMeta';\n\nfunction SignUp({ metaSignUp }) {\n    usePageMeta(metaSignUp.title, metaSignUp.description);\n\n  return (\n      <div >\n        <AllSignUp />\n      </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    metaSignUp: state.dataText.dataJson.coursesPage.meta,\n  };\n};\n\nexport default connect(mapStateToProps)(SignUp);\n","/*\n *   Copyright (c) 2023 \n *   All rights reserved.\n */\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction TextError(props) {\n\n  return <div className=\"form-error-msg\">{props.children}</div>;\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    lang: state.langDir.lang,\n  };\n};\n\nexport default connect(mapStateToProps)(TextError);"],"names":["connect","state","signUpPage","dataText","dataJson","signUpImgs","allImages","pagesImgs","errorMsg","dispatch","signUpUser","formData","signInUser","navigate","useNavigate","redirectPath","useLocation","path","validationSchema","Yup","name","required","email","invalid","password","checkbox","onSubmit","values","submitProps","localStorage","getItem","replace","setSubmitting","resetForm","handleGoLogin","className","src","logoImg","alt","signupSignHeader","signupSignParagraph","initialValues","formik","htmlFor","signupNameLabel","type","id","placeholder","signupNamePlaceholder","component","TextError","signupEmailLabel","signupEmailPlaceholder","signupPasswordLabel","signupPasswordPlaceholder","signupRememberMe","signupLoginBtn","googleLogo","signupGoogleBtn","signupBottomParagraph","onClick","signupBottomSpan","leftImg","metaSignUp","coursesPage","meta","usePageMeta","title","description","AllSignUp","lang","langDir","props","children"],"sourceRoot":""}