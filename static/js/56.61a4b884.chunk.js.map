{"version":3,"file":"static/js/56.61a4b884.chunk.js","mappings":"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","sources":["component/UI/pages/login/sections/AllLogin.jsx","component/UI/pages/login/Login.jsx","component/common/TextError.jsx"],"sourcesContent":["/*\n *   Copyright (c) 2023 \n *   All rights reserved.\n */\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport TextError from \"./../../../../common/TextError\";\nimport {\n  logOut,\n  signInUser,\n} from \"./../../../../../redux/features/dataAuth/dataAuthSlice\";\n\nfunction AllLogin({ loginPage, loginImgs, errorMsg, signInUser, logOut }) {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const redirectPath = location.state?.path || \"/\";\n  const initialValues = {\n    email: \"\",\n    password: \"\",\n    checkbox: false,\n  };\n  const validationSchema = Yup.object({\n    email: Yup.string().email(errorMsg.invalid).required(errorMsg.required),\n    password: Yup.string().required(errorMsg.required),\n    checkbox: Yup.boolean(),\n  });\n  const onSubmit = async (values, submitProps) => {\n    // console.log(values);\n    // console.log(submitProps);\n    await signInUser(values);\n    if (localStorage.getItem(\"token\")) {\n      navigate(redirectPath, { replace: true });\n    }\n\n    submitProps.setSubmitting(false);\n    submitProps.resetForm();\n  };\n  const handleGoLink = (path) => {\n    navigate(`/${path}`);\n  };\n  return (\n    <section className=\"login\">\n      <div className=\"container-wrapped\">\n        <div className=\"sign\">\n          <div className=\"sign-left-container\">\n            <div className=\"sign-left\">\n              <div className=\"sign-left-top\">\n                <div className=\"hand-img\">\n                  <img src={loginImgs.logoImg2} alt=\"\" />\n                </div>\n                <h2 className=\"sign-header\">{loginPage.loginSignHeader}</h2>\n                <p className=\"sign-paragraph\">{loginPage.loginSignParagraph}</p>\n              </div>\n              <div className=\"sign-form\">\n                <Formik\n                  initialValues={initialValues}\n                  validationSchema={validationSchema}\n                  onSubmit={onSubmit}\n                >\n                  {(formik) => {\n                    return (\n                      <Form>\n                        <div className=\"sign-box sign-email\">\n                          <label htmlFor=\"login-email\">\n                            {loginPage.loginEmailLabel}\n                          </label>\n                          <Field\n                            type=\"email\"\n                            id=\"login-email\"\n                            name=\"email\"\n                            placeholder={loginPage.loginEmailPlaceholder}\n                          />\n                          <ErrorMessage name=\"email\" component={TextError} />\n                        </div>\n                        <div className=\"sign-box sign-password\">\n                          <label htmlFor=\"login-password\">\n                            {loginPage.loginPasswordLabel}\n                          </label>\n                          <Field\n                            type=\"password\"\n                            id=\"login-password\"\n                            name=\"password\"\n                            placeholder={loginPage.loginPasswordPlaceholder}\n                          />\n                          <ErrorMessage name=\"password\" component={TextError} />\n                        </div>\n                        <div className=\"text-remember\">\n                          <div className=\"checkbox-box\">\n                            <Field\n                              type=\"checkbox\"\n                              id=\"login-checkbox\"\n                              name=\"checkbox\"\n                            />\n                            <label htmlFor=\"login-checkbox\">\n                              {loginPage.loginRememberMe}\n                            </label>\n                          </div>\n                          <button\n                            type=\"button\"\n                            className=\"odd-words\"\n                            onClick={() => handleGoLink(\"forgetpassword\")}\n                            // onClick={() => logOut()}\n                          >\n                            {loginPage.loginForgetPassword}\n                          </button>\n                        </div>\n                        <button type=\"submit\" className=\"sign-btn\">\n                          {loginPage.loginLoginBtn}\n                        </button>\n                        <p className=\"bottom-paragraph\">\n                          {loginPage.loginBottomParagraph}&thinsp;\n                          <button\n                            type=\"button\"\n                            className=\"button-go-login\"\n                            onClick={() => handleGoLink(\"signup\")}\n                          >\n                            <span className=\"bottom-span\">\n                              {loginPage.loginBottomSpan}\n                            </span>\n                          </button>\n                        </p>\n                      </Form>\n                    );\n                  }}\n                </Formik>\n              </div>\n            </div>\n          </div>\n          <div className=\"sign-right\">\n            <img src={loginImgs.leftImg} alt=\"\" />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loginPage: state.dataText.dataJson.loginPage,\n    loginImgs: state.allImages.pagesImgs.loginImgs,\n    errorMsg: state.dataText.dataJson.errorMsg,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    signInUser: (formData) => dispatch(signInUser(formData)),\n    // logOut: () => dispatch(logOut()),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AllLogin);\n","/*\n *   Copyright (c) 2023 \n *   All rights reserved.\n */\nimport React from \"react\";\nimport AllLogin from \"./sections/AllLogin\";\nimport { connect } from \"react-redux\";\nimport usePageMeta from './../../../../hooks/usePageMeta';\n\nfunction Login({ metaLogin }) {\n    usePageMeta(metaLogin.title, metaLogin.description);\n\n  return (\n      <div>\n        <AllLogin />\n      </div>\n  );\n}\nconst mapStateToProps = (state) => {\n  return {\n    metaLogin: state.dataText.dataJson.coursesPage.meta,\n  };\n};\n\nexport default connect(mapStateToProps)(Login);\n","/*\n *   Copyright (c) 2023 \n *   All rights reserved.\n */\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nfunction TextError(props) {\n\n  return <div className=\"form-error-msg\">{props.children}</div>;\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    lang: state.langDir.lang,\n  };\n};\n\nexport default connect(mapStateToProps)(TextError);"],"names":["connect","state","loginPage","dataText","dataJson","loginImgs","allImages","pagesImgs","errorMsg","dispatch","signInUser","formData","navigate","logOut","useNavigate","redirectPath","useLocation","path","validationSchema","Yup","email","invalid","required","password","checkbox","onSubmit","values","submitProps","localStorage","getItem","replace","setSubmitting","resetForm","handleGoLink","className","src","logoImg2","alt","loginSignHeader","loginSignParagraph","initialValues","formik","htmlFor","loginEmailLabel","type","id","name","placeholder","loginEmailPlaceholder","component","TextError","loginPasswordLabel","loginPasswordPlaceholder","loginRememberMe","onClick","loginForgetPassword","loginLoginBtn","loginBottomParagraph","loginBottomSpan","leftImg","metaLogin","coursesPage","meta","usePageMeta","title","description","lang","langDir","props","children"],"sourceRoot":""}